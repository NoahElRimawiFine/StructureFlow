# @package _global_

# This config is for resuming interrupted Optuna hyperparameter searches
# It uses the same database and study name as the original search
# But allows you to adjust the number of additional trials

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/ap"  # Using AUPR (average precision) as the optimization metric

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached
  # Specify the existing multirun directory to continue from
  sweep:
    dir: ${paths.log_dir}/${task_name}/multiruns/2025-04-21_00-27-23
    # Start new trials at trial number 19 (indexing starts from 0)
    subdir: ${hydra.job.num}

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # Use SQLite storage with absolute path
    storage: sqlite:///outputs/hparams_search/optuna.db

    # name of the study to persist optimization results - SAME as original
    study_name: "sf2m_grn_optimization_2"

    # Load existing study for resume (CRITICAL for true resumption)
    load_if_exists: true

    # number of parallel workers - keep to 1 to avoid SQLite locking issues
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: maximize  # We want to maximize AUPR

    # Number of ADDITIONAL runs that will be executed
    # Adjust this based on how many more trials you want to run
    n_trials: 19

    # Use the SAME sampler with SAME settings for proper continuation
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 1234
      n_startup_trials: 2

    # Use the SAME parameter space
    params:
      # Model parameters
      model.sigma: interval(0.5, 2.0)  # Noise scale
      model.alpha: interval(0.05, 0.3)  # Alpha parameter
      model.reg: interval(0.0, 1e-4)  # Regularization strength
      model.GL_reg: interval(0.0, 0.10)  # Graph Laplacian regularization parameter
      model.n_steps: choice(15000, 50000, 80000)  # Number of training steps
      model.dr: interval(0.0, 0.4)  # Dropout rate for the networks
      
      # Optimizer parameters
      model.optimizer.lr: interval(0.0001, 0.01)  # Learning rate
      model.optimizer.weight_decay: interval(1e-3, 5e-2)  # Weight decay for AdamW
      
      # Data parameter
      data.batch_size: choice(32, 64, 128)  # Batch size