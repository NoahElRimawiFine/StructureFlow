# @package _global_

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/ap"  # Using AUPR (average precision) as the optimization metric

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # Using in-memory storage to avoid SQLite issues
    storage: null

    # name of the study to persist optimization results
    study_name: "sf2m_grn_optimization"

    # number of parallel workers
    n_jobs: 20

    # 'minimize' or 'maximize' the objective
    direction: maximize  # We want to maximize AUPR

    # total number of runs that will be executed
    n_trials: 40  # Increased number of trials for better exploration

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 1234
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define hyperparameter search space for sf2m model
    params:
      # Model parameters
      model.sigma: interval(0.5, 2.0)  # Noise scale
      model.alpha: interval(0.05, 0.3)  # Alpha parameter
      model.reg: interval(1e-6, 1e-4)  # Regularization strength
      model.GL_reg: interval(0.01, 0.15)  # Graph Laplacian regularization parameter
      model.n_steps: choice(10000, 15000, 20000)  # Number of training steps
      
      # Optimizer parameters
      model.optimizer.lr: interval(0.0001, 0.01)  # Learning rate
      model.optimizer.weight_decay: interval(1e-3, 5e-2)  # Weight decay for AdamW
      
      # Data parameter
      data.batch_size: choice(32, 64, 128)  # Batch size
